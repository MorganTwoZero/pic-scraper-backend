version: '3'

services:
  db:
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: password
    image: postgres:15.1-alpine
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres  -d postgres'"]
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "log_statement=all"]

  web:
    environment:
      - APP_ENVIRONMENT=localdocker

      - APP_app__headers__cookie=${APP_app__headers__cookie}
      - APP_app__headers__authorization=${APP_app__headers__authorization}
      - APP_app__headers__csrf_token=${APP_app__headers__csrf_token}
      - RUST_LOG=${RUST_LOG}
    build: .
    command: /api
    volumes:
      - ./config:/home/nonroot/config:ro
    depends_on: 
      db:
        condition: service_healthy
    ports:
      - "8000:8000"

  scraper:
    environment:
      - APP_ENVIRONMENT=localdocker

      - APP_app__headers__cookie=${APP_app__headers__cookie}
      - APP_app__headers__authorization=${APP_app__headers__authorization}
      - APP_app__headers__csrf_token=${APP_app__headers__csrf_token}
      - RUST_LOG=${RUST_LOG}
    build: .
    command: /scraper
    volumes:
      - ./config:/home/nonroot/config:ro
      - ./headers.txt:/home/nonroot/headers.txt:ro
    depends_on: 
      db:
        condition: service_healthy
      web:
        condition: service_started

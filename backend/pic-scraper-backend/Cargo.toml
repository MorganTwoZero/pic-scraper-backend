[package]
name = "pic-scraper-backend"
version = "1.1.0"
edition = "2021"
publish = false

[lib]
path = "src/lib.rs"

[[bin]]
path = "src/main.rs"
name = "pic-scraper-backend"

[dependencies]
axum = { version = "0.6.19", features = ["headers", "tracing"] }
hyper = "0.14.27"
tower-http = { version = "0.4.3", features = ["trace", "fs"] }
tokio = { version = "1.29.1", features = ["macros", "rt"] }
config = "0.13.3"
serde = { version = "1.0.177", features = ["derive"] }
serde-aux = { version = "4.2.0", default-features = false }
tracing = { version = "0.1.37", features = ["log"] }
tracing-subscriber = { version = "0.3.17", features = ["env-filter", "json"] }
tracing-bunyan-formatter = "0.3.8"
tracing-log = "0.1.3"
secrecy = { version = "0.8.0", features = ["serde"] }
chrono = { version = "0.4.26", default-features = false, features = ["std"] }
reqwest = { version = "0.11.18", default-features = false, features = [
    "json",
    "rustls-tls",
    "stream",
] }
thiserror = "1.0.44"
anyhow = "1.0.72"
futures = "0.3.28"
async-trait = "0.1.72"
futures-util = "0.3.28"
regex = "1.9.3"
serde_json = "1.0.104"
delay_timer = { git = "https://github.com/MorganTwoZero/delay-timer.git" }
dotenvy = "0.15.7"
tonic = { version = "0.8.3", features = ["tls", "tls-roots"] }
tracing-opentelemetry = "0.19.0"
opentelemetry-otlp = { version = "0.12.0", features = ["reqwest-client", "reqwest-rustls", "http-proto", "tls"] }
opentelemetry = { version = "0.19.0", default-features = false, features = [ "trace", "rt-tokio" ] }
embed = { path = "../embed" }
errors = { path = "../errors" }
config_structs = { path = "../config-structs" }
etl = { path = "../etl" }

[dependencies.uuid]
version = "1.4.1"
features = ["v4", "fast-rng", "macro-diagnostics", "serde"]

[dependencies.sqlx]
version = "0.7.1"
default-features = false
features = ["runtime-tokio-rustls", "macros", "postgres", "migrate"]

[dev-dependencies]
once_cell = "1.18.0"
wiremock = "0.5.19"
serde_path_to_error = "0.1.14"


# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

# configuration file for git-cliff (0.1.0)

[package.metadata.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## {{ now(utc=true) | date(format="%Y-%m-%d %H:%M") }} UTC
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        [{{ previous.commit_id | truncate(length=7, end="") }}]({{ previous.commit_id }})...\
            [{{ commit_id | truncate(length=7, end="") }}]({{ commit_id }})
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.id }}))\
          {% for footer in commit.footers -%}
            , {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[package.metadata.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features"},
    { message = "^fix", group = "Bug Fixes"},
    { message = "^doc", group = "Documentation"},
    { message = "^perf", group = "Performance"},
    { message = "^refactor", group = "Refactor"},
    { message = "^style", group = "Styling"},
    { message = "^test", group = "Testing"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { message = "^chore", group = "Miscellaneous Tasks"},
    { body = ".*security", group = "Security"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
name: Staging

on:
  push:
    branches:
      - stage

env:
  RUSTFLAGS: -D warnings
  CARGO_TERM_COLOR: always

jobs:
  security_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.1-alpine
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432

    env:
      SQLX_VERSION: 0.7.*
      SQLX_FEATURES: "rustls,postgres"
      DATABASE_URL: "postgres://postgres:password@localhost:5432/postgres"

    steps:
      - uses: arduino/setup-protoc@v1
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        id: cache
        with:
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        if: ${{ steps.cache.outputs.cache-hit == 'false' }}
        run: >
          cargo install sqlx-cli --force
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Check sqlx-data.json is up-to-date
        run: cargo sqlx prepare --check --workspace

      - name: Run cargo test
        run: cargo test

  fmt:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.1-alpine
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432

    env:
      SQLX_VERSION: 0.7.*
      SQLX_FEATURES: "rustls,postgres"

    steps:
      - uses: arduino/setup-protoc@v1
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        id: cache
        with:
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        if: ${{ steps.cache.outputs.cache-hit == 'false' }}
        run: >
          cargo install sqlx-cli --force
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - run: cargo clippy -- -D warnings

  coverage:
    runs-on: ubuntu-latest
    continue-on-error: true

    services:
      postgres:
        image: postgres:15.1-alpine
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432

    env:
      SQLX_VERSION: 0.7.*
      SQLX_FEATURES: "rustls,postgres"

    steps:
      - uses: arduino/setup-protoc@v1
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
        id: cache
        with:
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        if: ${{ steps.cache.outputs.cache-hit == 'false' }}
        run: >
          cargo install sqlx-cli --force
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      
      - name: Collect coverage data
        run: cargo llvm-cov nextest --lcov --output-path lcov.info
      - name: Upload coverage data to codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: arduino/setup-protoc@v1
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: morgan20/pic-scraper-backend:stage
          build-args: VITE_APP_BACKEND_URL=https://stage.pixiv.sbs/api

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Copy docker-compose.stage.yml
      uses: appleboy/scp-action@master
      with:
        HOST: ${{ secrets.HOST }}
        USERNAME: ${{ secrets.USERNAME }}
        KEY: ${{ secrets.SSHKEY }}
        source: "docker-compose.yml, ./backend/migrations, ./config"
        target: "pic-scraper-backend-stage"

    - name: Spin up docker compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        USERNAME: ${{ secrets.USERNAME }}
        KEY: ${{ secrets.SSHKEY }}
        script: |
          cd pic-scraper-backend-stage
          docker compose -f docker-compose.stage.yml up -d --pull always